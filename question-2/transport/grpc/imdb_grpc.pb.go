// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImdbGrpcHandlerClient is the client API for ImdbGrpcHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImdbGrpcHandlerClient interface {
	GetList(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	GetDetail(ctx context.Context, in *SingleRequest, opts ...grpc.CallOption) (*MovieDetail, error)
}

type imdbGrpcHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewImdbGrpcHandlerClient(cc grpc.ClientConnInterface) ImdbGrpcHandlerClient {
	return &imdbGrpcHandlerClient{cc}
}

func (c *imdbGrpcHandlerClient) GetList(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/imdb_grpc.ImdbGrpcHandler/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imdbGrpcHandlerClient) GetDetail(ctx context.Context, in *SingleRequest, opts ...grpc.CallOption) (*MovieDetail, error) {
	out := new(MovieDetail)
	err := c.cc.Invoke(ctx, "/imdb_grpc.ImdbGrpcHandler/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImdbGrpcHandlerServer is the server API for ImdbGrpcHandler service.
// All implementations must embed UnimplementedImdbGrpcHandlerServer
// for forward compatibility
type ImdbGrpcHandlerServer interface {
	GetList(context.Context, *FetchRequest) (*SearchResponse, error)
	GetDetail(context.Context, *SingleRequest) (*MovieDetail, error)
	mustEmbedUnimplementedImdbGrpcHandlerServer()
}

// UnimplementedImdbGrpcHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedImdbGrpcHandlerServer struct {
}

func (UnimplementedImdbGrpcHandlerServer) GetList(context.Context, *FetchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedImdbGrpcHandlerServer) GetDetail(context.Context, *SingleRequest) (*MovieDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedImdbGrpcHandlerServer) mustEmbedUnimplementedImdbGrpcHandlerServer() {}

// UnsafeImdbGrpcHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImdbGrpcHandlerServer will
// result in compilation errors.
type UnsafeImdbGrpcHandlerServer interface {
	mustEmbedUnimplementedImdbGrpcHandlerServer()
}

func RegisterImdbGrpcHandlerServer(s grpc.ServiceRegistrar, srv ImdbGrpcHandlerServer) {
	s.RegisterService(&ImdbGrpcHandler_ServiceDesc, srv)
}

func _ImdbGrpcHandler_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImdbGrpcHandlerServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imdb_grpc.ImdbGrpcHandler/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImdbGrpcHandlerServer).GetList(ctx, req.(*FetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImdbGrpcHandler_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImdbGrpcHandlerServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imdb_grpc.ImdbGrpcHandler/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImdbGrpcHandlerServer).GetDetail(ctx, req.(*SingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImdbGrpcHandler_ServiceDesc is the grpc.ServiceDesc for ImdbGrpcHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImdbGrpcHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imdb_grpc.ImdbGrpcHandler",
	HandlerType: (*ImdbGrpcHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _ImdbGrpcHandler_GetList_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _ImdbGrpcHandler_GetDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "question-2/transport/grpc/imdb.proto",
}
